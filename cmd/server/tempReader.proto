// MIT License
//
// Copyright (c) 2021 Mert Bora Alper and EASE lab
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";
option go_package = "/main";  //  ignore this for now

//  "TempReading" is the schema of the incoming requests.
//  Each request shall contain:
//    1. The temperature in celsius.
//    2. The provider of the node (for instance `aws`)
//    3. The zone of the node (for instance `us-east-1`)
//    4. The unique identifier of the node (for example its hostname)
message TempReading {
  int32  celsius  = 1;
  string provider = 2;
  string zone     = 3;
  string machine  = 4;
}

//  "Response" is the schema of the outgoing responses.
//  Each response shall contain:
//    1. Whether the request was OK or not.
//    2. (Optional) The reason why it was *not* OK, if so.
message Response {
  bool   ok       = 1;
  string reason   = 2;
}

//  "TempReader" is the service our ingress server provides.
//  The only available method we offer is "ReadTemp", that accepts
//  a request of type "TempReading" and returns a response of type
//  "Response"
service TempReader {
  rpc ReadTemp(TempReading) returns (Response) {}
}
